
GENE = ["s1", "spike"]
LINEAGE = ['a']


rule all:
    input:
        auspice_json = expand("auspice/seasonal_corona_oc43_{lineage}_{gene}_after2009.json", gene= GENE, lineage=LINEAGE)

rule files:
    params:
        # include = "config/include.txt",
        dropped_strains = "config/dropped_strains.txt",
        reference = "config/oc43_{gene}_reference.gb",
        auspice_config = "config/auspice_config.json",
        lat_longs = "config/lat_longs.tsv",
        colors = "config/colors.tsv"
        # description = "config/description.md"

files = rules.files.params

rule download:
    message: "Downloading sequences from fauna"
    output:
        sequences = "data/oc43_{lineage}_{gene}_after2009.fasta"
    params:
        fasta_fields = "strain accession strain_name date host country virus subtype type sequence_locus"
    shell:
        """
        python3 ../fauna/vdb/download.py \
            --database vdb \
            --virus seasonal_corona \
            --fasta_fields {params.fasta_fields} \
            --select sequence_locus:{wildcards.gene} subtype: oc43 \
            --path $(dirname {output.sequences}) \
            --fstem $(basename {output.sequences} .fasta)
        """

rule parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = rules.download.output.sequences
    output:
        sequences = "results/sequences_oc43_{lineage}_{gene}.fasta",
        metadata = "results/metadata_oc43_{lineage}_{gene}.tsv"
    params:
        fasta_fields = "strain accession strain_name date host country virus subtype type sequence_locus",
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields} \
        """

def _get_min_length_by_wildcards(wildcards):
    if wildcards.gene == "full":
        min_length = 1000
    #All genes are already filtered for size when subalignment fastas are made
    else:
        min_length = 200
    return(min_length)

rule filter:
    message:
        """
        Filtering to
          - {params.sequences_per_group} sequence(s) per {params.group_by!s}
          - minimum genome length of {params.min_length}
        """
    input:
        sequences = rules.parse.output.sequences,
        metadata = rules.parse.output.metadata,
        exclude = files.dropped_strains
    output:
        sequences = "results/filtered_oc43_{lineage}_{gene}.fasta"
    params:
        group_by = "country",
        sequences_per_group = 5000,
        min_length = _get_min_length_by_wildcards
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences} \
            --group-by {params.group_by} \
            --sequences-per-group {params.sequences_per_group} \
            --min-length {params.min_length}
        """

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - filling gaps with N
        """
    input:
        sequences = rules.filter.output.sequences,
        reference = files.reference
    output:
        alignment = "results/aligned_oc43_{lineage}_{gene}.fasta"
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --remove-reference \
            --fill-gaps
        """

rule tree:
    message: "Building tree"
    input:
        alignment = rules.align.output.alignment
    output:
        tree = "results/tree_raw_oc43_{lineage}_{gene}.nwk"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree}
        """

rule refine:
    message:
        """
        Refining tree
        """
    input:
        tree = rules.tree.output.tree,
        alignment = rules.align.output,
        metadata = rules.parse.output.metadata
    output:
        tree = "results/tree_oc43_{lineage}_{gene}.nwk",
        node_data = "results/branch_lengths_oc43_{lineage}_{gene}.json"
    params:
        coalescent = "opt",
        date_inference = "marginal"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-filter-iqd 4
        """

rule ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.align.output
    output:
        node_data = "results/nt_muts_oc43_{lineage}_{gene}.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = files.reference
    output:
        node_data = "results/aa_muts_oc43_{lineage}_{gene}.json"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output-node-data {output.node_data}
        """


rule export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
        branch_lengths = rules.refine.output.node_data,
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        lat_longs = files.lat_longs,
        auspice_config = files.auspice_config,
        colors = files.colors
        # description = files.description
    output:
        auspice_json = "auspice/seasonal_corona_oc43_{lineage}_{gene}_after2009.json"
        # auspice_json = rules.all.input.auspice_json
        # --node-data {input.branch_lengths} {input.nt_muts} {input.aa_muts} {input.clades}\
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.nt_muts} {input.aa_muts} \
            --include-root-sequence \
            --auspice-config {input.auspice_config} \
            --lat-longs {input.lat_longs} \
            --colors {input.colors} \
            --output {output.auspice_json}
        """

rule clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    shell:
        "rm -rfv {params}"
